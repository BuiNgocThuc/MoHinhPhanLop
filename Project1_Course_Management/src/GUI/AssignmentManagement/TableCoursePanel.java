/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.AssignmentManagement;

import GUI.AssignmentManagement.AssigmentCourseDetail;
import BLL.CourseInstructorBLL;
import BLL.Entity.CourseEntity;
import BLL.Entity.PersonEntity;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import util.Paginate;

/**
 *
 * @author ASUS
 */
public class TableCoursePanel extends javax.swing.JPanel {

    /**
     * Creates new form pnTableCourse
     */
    private final CourseInstructorBLL courseInstructorBLL = new CourseInstructorBLL();

    private int itemPerPage = 25;
    private String query = "";
    private int currentPage = 1;
    private Paginate<CourseEntity> coursesPaginate;

    public TableCoursePanel() throws SQLException {
        initComponents();
        
        updateData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spCourse = new javax.swing.JScrollPane();
        tblCourse = new javax.swing.JTable();
        itemPerPageSpinner = new javax.swing.JSpinner();
        currentPageSpinner = new javax.swing.JSpinner();
        nextPageButton = new javax.swing.JButton();
        detailPageLabel = new javax.swing.JLabel();
        previousPageButton = new javax.swing.JButton();
        titlePaginationLabel = new javax.swing.JLabel();
        detailItemPerPageLabel = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();

        tblCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "ID", "Tên khóa học", "Giảng viên dạy"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCourse.setRowHeight(35);
        tblCourse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCourseMouseClicked(evt);
            }
        });
        spCourse.setViewportView(tblCourse);
        if (tblCourse.getColumnModel().getColumnCount() > 0) {
            tblCourse.getColumnModel().getColumn(0).setMinWidth(50);
            tblCourse.getColumnModel().getColumn(0).setMaxWidth(50);
            tblCourse.getColumnModel().getColumn(1).setMinWidth(50);
            tblCourse.getColumnModel().getColumn(1).setMaxWidth(50);
            tblCourse.getColumnModel().getColumn(2).setMinWidth(200);
            tblCourse.getColumnModel().getColumn(2).setMaxWidth(200);
        }

        itemPerPageSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                itemPerPageSpinnerStateChanged(evt);
            }
        });

        currentPageSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                currentPageSpinnerStateChanged(evt);
            }
        });

        nextPageButton.setText(">>");
        nextPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextPageButtonActionPerformed(evt);
            }
        });

        detailPageLabel.setText("of 30");

        previousPageButton.setText("<<");
        previousPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousPageButtonActionPerformed(evt);
            }
        });

        titlePaginationLabel.setText("Items per page");

        detailItemPerPageLabel.setText("1-25 of 300 items");

        searchTextField.setToolTipText("Search query...");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spCourse)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(titlePaginationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemPerPageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detailItemPerPageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(previousPageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentPageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detailPageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextPageButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spCourse, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextPageButton)
                    .addComponent(detailPageLabel)
                    .addComponent(previousPageButton)
                    .addComponent(detailItemPerPageLabel)
                    .addComponent(titlePaginationLabel)
                    .addComponent(itemPerPageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentPageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblCourseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCourseMouseClicked
        if (evt.getClickCount() == 2) {
            int row = tblCourse.getSelectedRow();
            int courseID = (int) tblCourse.getValueAt(row, 1);
            try {
                JFrame assigmentCourseDetail = new AssigmentCourseDetail(courseID);
                assigmentCourseDetail.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        try {
                            List<CourseEntity> courses = courseInstructorBLL.getListCourseAssignInstructor();
                            populateUI();
                        } catch (SQLException ex) {
                            ex.printStackTrace();
                            JOptionPane.showMessageDialog(null, "Lỗi hệ thống");
                        }
                    }
                });
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Lỗi hệ thống");
            }
        }    }//GEN-LAST:event_tblCourseMouseClicked

    private void itemPerPageSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_itemPerPageSpinnerStateChanged
        itemPerPage = Integer.valueOf(itemPerPageSpinner.getValue().toString());

        updateData();
    }//GEN-LAST:event_itemPerPageSpinnerStateChanged

    private void currentPageSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_currentPageSpinnerStateChanged
        currentPage = Integer.valueOf(currentPageSpinner.getValue().toString());

        updateData();
    }//GEN-LAST:event_currentPageSpinnerStateChanged

    private void nextPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextPageButtonActionPerformed
        currentPage = coursesPaginate.getTotalPages();
        currentPageSpinner.setValue(currentPage);
        updateData();
    }//GEN-LAST:event_nextPageButtonActionPerformed

    private void previousPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousPageButtonActionPerformed
        currentPage = 0;

        currentPageSpinner.setValue(currentPage);
        updateData();
    }//GEN-LAST:event_previousPageButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        query = searchTextField.getText();
        updateData();
    }//GEN-LAST:event_searchButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner currentPageSpinner;
    private javax.swing.JLabel detailItemPerPageLabel;
    private javax.swing.JLabel detailPageLabel;
    private javax.swing.JSpinner itemPerPageSpinner;
    private javax.swing.JButton nextPageButton;
    private javax.swing.JButton previousPageButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JScrollPane spCourse;
    private javax.swing.JTable tblCourse;
    private javax.swing.JLabel titlePaginationLabel;
    // End of variables declaration//GEN-END:variables

    

    public void deleteAllInstructorAssignCourse() throws SQLException {
        int seletedRow = tblCourse.getSelectedRow();
        if (seletedRow != -1) {
            int courseID = (int) tblCourse.getValueAt(seletedRow, 1);
            courseInstructorBLL.deleteAllInstructorAssignCourse(courseID);
        }
    }

    public void findCourses(String text) throws SQLException {
        List<CourseEntity> courses = courseInstructorBLL.findCourses(text);
        if (courses.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Không tìm thấy");
        } else {
            populateUI();
        }
    }

    public void updateData() {
        try {
            if (coursesPaginate == null) {
                coursesPaginate = new Paginate<>(20, 0, 1, 0, null);
            }

            int limit = itemPerPage;
            int offset = itemPerPage * (currentPage - 1);

            coursesPaginate = courseInstructorBLL.getListCourseAssignedInstructor(offset, limit, query);
            System.out.println(coursesPaginate);
            populateUI();
        } catch (SQLException ex) {
            Logger.getLogger(TableCoursePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void populateUI() throws SQLException {
        DefaultTableModel model = (DefaultTableModel) tblCourse.getModel();
        model.setRowCount(0);
        int no = 1;
        for (CourseEntity course : coursesPaginate.getItems()) {
            int courseID = course.getCourseID();
            String title = course.getTitle();
            String instructorInfos = "-------";

            List<PersonEntity> instructors = course.getInstructors();
            if (instructors != null) {
                instructorInfos = "";
                for (int i = 0; i < instructors.size() - 1; i++) {
                    instructorInfos += String.format("%d-%s %s, ",
                            instructors.get(i).getPersonID(),
                            instructors.get(i).getLastName(),
                            instructors.get(i).getFirstName());
                }
                instructorInfos += String.format("%d-%s %s",
                        instructors.get(instructors.size() - 1).getPersonID(),
                        instructors.get(instructors.size() - 1).getLastName(),
                        instructors.get(instructors.size() - 1).getFirstName());
            }
            Object[] row
                    = {
                        no++, courseID, title, instructorInfos
                    };
            model.addRow(row);
        }
        
          int totalItems = coursesPaginate.getTotalItems();
        int totalPages = 1;
        
        if (coursesPaginate.getTotalPages() > 0) {
            totalPages = coursesPaginate.getTotalPages();
        }
        SpinnerNumberModel itemPerPageModel = new SpinnerNumberModel(itemPerPage, 1, 25, 1);
        itemPerPageSpinner.setModel(itemPerPageModel);
        detailItemPerPageLabel.setText("1-25 of " + totalItems + " items");
        detailPageLabel.setText("of " + totalPages);
        SpinnerNumberModel currentPageModel = new SpinnerNumberModel(currentPage, 1, totalPages, 1);
        currentPageSpinner.setModel(currentPageModel);
    }
}
