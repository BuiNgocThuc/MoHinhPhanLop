/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.AssignmentManagement;

import BLL.CourseBLL;
import BLL.PersonBLL;
import DTO.CourseDTO;
import DTO.PersonDTO;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Bao
 */
public class PnInstructor extends javax.swing.JPanel {

    /**
     * Creates new form PnC
     */
    CourseBLL courseBLL = new CourseBLL();
    PersonBLL personBLL = new PersonBLL();

    public PnInstructor() {
        initComponents();
        updateData();
    }

    private void updateData() {
        updateInstructorList();
        updateCourseList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnSelectedCourseList = new javax.swing.JPanel();
        spSelectedCourseList = new javax.swing.JScrollPane();
        tableSelectedCourseList = new javax.swing.JTable();
        btDeleteCourse = new javax.swing.JButton();
        pnCourseList = new javax.swing.JPanel();
        spCourseList = new javax.swing.JScrollPane();
        tableCourseList = new javax.swing.JTable();
        btSelectedCourse = new javax.swing.JButton();
        btSeeAllCourseList = new javax.swing.JButton();
        pnInstructorList = new javax.swing.JPanel();
        spInstructorList = new javax.swing.JScrollPane();
        tableInstructorList = new javax.swing.JTable();
        tfInstructorSearch = new javax.swing.JTextField();
        btInstructorSearch = new javax.swing.JButton();
        tfCourseSearch = new javax.swing.JTextField();
        btCourseSearch = new javax.swing.JButton();
        btSeeAllInstructorList = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(900, 650));

        pnSelectedCourseList.setBackground(new java.awt.Color(255, 255, 255));
        pnSelectedCourseList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách khóa học đã chọn", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        tableSelectedCourseList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã môn học", "Tên môn học"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSelectedCourseList.setToolTipText("");
        spSelectedCourseList.setViewportView(tableSelectedCourseList);

        btDeleteCourse.setText("Xóa");
        btDeleteCourse.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(206, 206, 206)));
        btDeleteCourse.setPreferredSize(new java.awt.Dimension(72, 40));
        btDeleteCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteCourseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnSelectedCourseListLayout = new javax.swing.GroupLayout(pnSelectedCourseList);
        pnSelectedCourseList.setLayout(pnSelectedCourseListLayout);
        pnSelectedCourseListLayout.setHorizontalGroup(
            pnSelectedCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSelectedCourseListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spSelectedCourseList, javax.swing.GroupLayout.PREFERRED_SIZE, 785, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btDeleteCourse, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnSelectedCourseListLayout.setVerticalGroup(
            pnSelectedCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSelectedCourseListLayout.createSequentialGroup()
                .addComponent(spSelectedCourseList, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addGap(7, 7, 7))
            .addGroup(pnSelectedCourseListLayout.createSequentialGroup()
                .addComponent(btDeleteCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnCourseList.setBackground(new java.awt.Color(255, 255, 255));
        pnCourseList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách khóa học", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
        pnCourseList.setPreferredSize(new java.awt.Dimension(22, 310));

        tableCourseList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Mã môn học", "Tên môn học"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spCourseList.setViewportView(tableCourseList);

        btSelectedCourse.setText("Thêm");
        btSelectedCourse.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(206, 206, 206)));
        btSelectedCourse.setPreferredSize(new java.awt.Dimension(72, 40));
        btSelectedCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectedCourseActionPerformed(evt);
            }
        });

        btSeeAllCourseList.setText("Xem tất cả");
        btSeeAllCourseList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(206, 206, 206)));
        btSeeAllCourseList.setPreferredSize(new java.awt.Dimension(86, 40));
        btSeeAllCourseList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSeeAllCourseListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnCourseListLayout = new javax.swing.GroupLayout(pnCourseList);
        pnCourseList.setLayout(pnCourseListLayout);
        pnCourseListLayout.setHorizontalGroup(
            pnCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCourseListLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(spCourseList, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                .addGap(7, 7, 7)
                .addGroup(pnCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btSeeAllCourseList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btSelectedCourse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );
        pnCourseListLayout.setVerticalGroup(
            pnCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCourseListLayout.createSequentialGroup()
                .addGroup(pnCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spCourseList, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                    .addGroup(pnCourseListLayout.createSequentialGroup()
                        .addComponent(btSeeAllCourseList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSelectedCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pnInstructorList.setBackground(new java.awt.Color(255, 255, 255));
        pnInstructorList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách giảng viên", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
        pnInstructorList.setPreferredSize(new java.awt.Dimension(22, 100));

        tableInstructorList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Mã giảng viên", "Tên giảng viên"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spInstructorList.setViewportView(tableInstructorList);

        javax.swing.GroupLayout pnInstructorListLayout = new javax.swing.GroupLayout(pnInstructorList);
        pnInstructorList.setLayout(pnInstructorListLayout);
        pnInstructorListLayout.setHorizontalGroup(
            pnInstructorListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnInstructorListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spInstructorList, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnInstructorListLayout.setVerticalGroup(
            pnInstructorListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnInstructorListLayout.createSequentialGroup()
                .addComponent(spInstructorList, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addContainerGap())
        );

        tfInstructorSearch.setPreferredSize(new java.awt.Dimension(64, 40));

        btInstructorSearch.setText("Tìm");
        btInstructorSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(206, 206, 206)));
        btInstructorSearch.setPreferredSize(new java.awt.Dimension(72, 40));
        btInstructorSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInstructorSearchActionPerformed(evt);
            }
        });

        tfCourseSearch.setPreferredSize(new java.awt.Dimension(64, 40));

        btCourseSearch.setText("Tìm");
        btCourseSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(206, 206, 206)));
        btCourseSearch.setPreferredSize(new java.awt.Dimension(72, 40));
        btCourseSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCourseSearchActionPerformed(evt);
            }
        });

        btSeeAllInstructorList.setText("Xem tất cả");
        btSeeAllInstructorList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(206, 206, 206)));
        btSeeAllInstructorList.setPreferredSize(new java.awt.Dimension(86, 40));
        btSeeAllInstructorList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSeeAllInstructorListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfInstructorSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btInstructorSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btSeeAllInstructorList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pnInstructorList, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfCourseSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btCourseSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(pnCourseList, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)))
                    .addComponent(pnSelectedCourseList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfInstructorSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btInstructorSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btSeeAllInstructorList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfCourseSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btCourseSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnInstructorList, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                    .addComponent(pnCourseList, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnSelectedCourseList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btSelectedCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectedCourseActionPerformed
        int row = tableCourseList.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn một khóa học để thêm vào danh sách!");
            return;
        }

        int courseId = (int) tableCourseList.getValueAt(row, 0);
        String courseName = tableCourseList.getValueAt(row, 1).toString();
        CourseDTO courseDTO = courseBLL.courseDetail(courseId);
        DefaultTableModel tableCourseSelectedListModel = (DefaultTableModel) tableSelectedCourseList.getModel();

        boolean isDuplicate = false;

        for (int i = 0; i < tableCourseSelectedListModel.getRowCount(); i++) {
            int selectedCourseId = (int) tableCourseSelectedListModel.getValueAt(i, 1);
            if (courseId == selectedCourseId) {
                isDuplicate = true;
                break;
            }
        }

        if (!isDuplicate) {
            int rowCount = tableCourseSelectedListModel.getRowCount();
            Object[] rowData = {rowCount + 1, courseDTO.getCourseID(), courseDTO.getTitle()};
            tableCourseSelectedListModel.addRow(rowData);
            JOptionPane.showMessageDialog(null, "Đã thêm khóa học có tên: " + courseName + " vào danh sách");
        } else {
            JOptionPane.showMessageDialog(null, "Khóa học đã tồn tại trong danh sách!");
        }
    }//GEN-LAST:event_btSelectedCourseActionPerformed

    private void btDeleteCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteCourseActionPerformed
        int a = tableSelectedCourseList.getRowCount();
        if (a == 0) {
            JOptionPane.showMessageDialog(null, "Chưa có môn học nào trong bảng!");
            return;
        }
        int row = tableSelectedCourseList.getSelectedRow();
        if (row != -1) {
            DefaultTableModel model = (DefaultTableModel) tableSelectedCourseList.getModel();
            model.removeRow(row);
            JOptionPane.showMessageDialog(null, "Đã xóa môn học");
        } else {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn một hàng để xóa!");
        }
    }//GEN-LAST:event_btDeleteCourseActionPerformed

    private void btCourseSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCourseSearchActionPerformed
        String idText = tfCourseSearch.getText().trim();

        if (!idText.isEmpty()) {
            try {
                int id = Integer.parseInt(idText);

                CourseDTO courseDTO = courseBLL.courseDetail(id);

                if (courseDTO.getTitle() != null) {
                    System.out.println(courseDTO);
                    DefaultTableModel tableModel = (DefaultTableModel) tableCourseList.getModel();
                    tableModel.setRowCount(0);

                    Object[] rowData = {courseDTO.getCourseID(), courseDTO.getTitle()};
                    tableModel.addRow(rowData);
                } else {
                    JOptionPane.showMessageDialog(null, "Không tìm thấy khóa học với ID: " + id);
                }
            } catch (NumberFormatException ex) {
                DefaultTableModel tableModel = (DefaultTableModel) tableCourseList.getModel();
                tableModel.setRowCount(0);
                boolean found = false;
                for (CourseDTO courseDTO : courseBLL.getAllist()) {
                    String title = courseDTO.getTitle().toLowerCase();
                    String searchText = idText.toLowerCase();
                    if (title.contains(searchText)) {
                        found = true;
                        Object[] rowData = {courseDTO.getCourseID(), courseDTO.getTitle()};
                        tableModel.addRow(rowData);
                    }
                }
                if (!found) {
                    JOptionPane.showMessageDialog(null, "Không tìm thấy khóa học với tên: " + idText);
                    updateCourseList();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập ID hoặc khóa học muốn tìm!");
            updateCourseList();
        }
    }//GEN-LAST:event_btCourseSearchActionPerformed

    private void btSeeAllInstructorListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSeeAllInstructorListActionPerformed
        updateInstructorList();
    }//GEN-LAST:event_btSeeAllInstructorListActionPerformed

    private void btSeeAllCourseListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSeeAllCourseListActionPerformed
        updateCourseList();
    }//GEN-LAST:event_btSeeAllCourseListActionPerformed

    private void btInstructorSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInstructorSearchActionPerformed
        String idText = tfInstructorSearch.getText().trim();

        if (!idText.isEmpty()) {
            try {
                int id = Integer.parseInt(idText);
                ArrayList<PersonDTO> instructorList = personBLL.getListInstructor();

                PersonDTO instructor = new PersonDTO();
                for (PersonDTO personDTO : instructorList) {
                    if (id == personDTO.getPersonID()) {
                        instructor = personDTO;
                    }
                }

                if (instructor.getPersonID() != 0) {
                    DefaultTableModel tableModel = (DefaultTableModel) tableInstructorList.getModel();
                    tableModel.setRowCount(0);

                    Object[] rowData = {instructor.getPersonID(), instructor.getFirstName()};
                    tableModel.addRow(rowData);
                } else {
                    JOptionPane.showMessageDialog(null, "Không tìm thấy giảng viên với ID: " + id);
                }
            } catch (NumberFormatException ex) {
                DefaultTableModel tableModel = (DefaultTableModel) tableInstructorList.getModel();
                tableModel.setRowCount(0);
                boolean found = false;
                for (PersonDTO personDTO : personBLL.getListInstructor()) {
                    String instructorName = personDTO.getFirstName() + " " + personDTO.getLastName();
                    String searchText = idText.toLowerCase();
                    if (instructorName.toLowerCase().contains(searchText)) {
                        found = true;
                        Object[] rowData = {personDTO.getPersonID(), instructorName};
                        tableModel.addRow(rowData);
                    }
                }
                if (!found) {
                    JOptionPane.showMessageDialog(null, "Không tìm thấy giảng viên với tên: " + idText);
                    updateInstructorList();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập ID hoặc tên giảng viên muốn tìm!");
            updateInstructorList();
        }
    }//GEN-LAST:event_btInstructorSearchActionPerformed

    private void updateInstructorList() {
        DefaultTableModel tableInstructorListModel = (DefaultTableModel) tableInstructorList.getModel();
        tableInstructorListModel.setRowCount(0);
        for (PersonDTO personDTO : personBLL.getListInstructor()) {
            String instructorName = personDTO.getFirstName() + " " + personDTO.getLastName();
            Object[] rowData = {personDTO.getPersonID(), instructorName};
            tableInstructorListModel.addRow(rowData);
        }
    }

    private void updateCourseList() {
        DefaultTableModel tableCourseListModel = (DefaultTableModel) tableCourseList.getModel();
        tableCourseListModel.setRowCount(0);
        for (CourseDTO courseDTO : courseBLL.selectAllCourse()) {
            Object[] rowData = {courseDTO.getCourseID(), courseDTO.getTitle()};
            tableCourseListModel.addRow(rowData);
        }
    }

    public List<CourseDTO> getSelectedCourses() {
        List<CourseDTO> selectedCourses = new ArrayList<>();

        DefaultTableModel tableModel = (DefaultTableModel) tableSelectedCourseList.getModel();
        int rowCount = tableModel.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            int courseId = (int) tableModel.getValueAt(i, 1);
            CourseDTO course = courseBLL.courseDetail(courseId);
            selectedCourses.add(course);
        }

        return selectedCourses;
    }

    public Integer getFirstColumnDataOfSelectedRow() {
        int selectedRow = tableInstructorList.getSelectedRow();
        if (selectedRow != -1) {
            DefaultTableModel tableModel = (DefaultTableModel) tableInstructorList.getModel();
            Integer rowData = (Integer) tableModel.getValueAt(selectedRow, 0);
            return rowData;
        } else {
            return null;
        }
    }

    public void resetSelectedCourseListTable() {
        DefaultTableModel model = (DefaultTableModel) tableSelectedCourseList.getModel();
        model.setRowCount(0);
        tableCourseList.clearSelection();
        tableInstructorList.clearSelection();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCourseSearch;
    private javax.swing.JButton btDeleteCourse;
    private javax.swing.JButton btInstructorSearch;
    private javax.swing.JButton btSeeAllCourseList;
    private javax.swing.JButton btSeeAllInstructorList;
    private javax.swing.JButton btSelectedCourse;
    private javax.swing.JPanel pnCourseList;
    private javax.swing.JPanel pnInstructorList;
    private javax.swing.JPanel pnSelectedCourseList;
    private javax.swing.JScrollPane spCourseList;
    private javax.swing.JScrollPane spInstructorList;
    private javax.swing.JScrollPane spSelectedCourseList;
    private javax.swing.JTable tableCourseList;
    private javax.swing.JTable tableInstructorList;
    private javax.swing.JTable tableSelectedCourseList;
    private javax.swing.JTextField tfCourseSearch;
    private javax.swing.JTextField tfInstructorSearch;
    // End of variables declaration//GEN-END:variables
}
