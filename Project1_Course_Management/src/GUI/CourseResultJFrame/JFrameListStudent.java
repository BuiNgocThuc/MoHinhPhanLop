/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.CourseResultJFrame;

import BLL.PersonBLL;
import BLL.StudentGradeBLL;
import DTO.PersonDTO;
import DTO.StudentGradeDTO;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author domin
 */
public class JFrameListStudent extends javax.swing.JFrame {

    PersonBLL personBLL = new PersonBLL();
    StudentGradeBLL studentGradeBll = new StudentGradeBLL();
    int studentID, courseID;
    /**
     * Creates new form JFrameListStudent
     */
    public JFrameListStudent(int courseID, String Title) {
        initComponents();
        this.courseID = courseID;
        jButtonClearSearch.setVisible(false);
        jTitle.setText(courseID+" - "+Title);
        LoadData();
        jSearch.getDocument().addDocumentListener(new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
              SearchAll();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
              SearchAll();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
        // Xử lý khi có sự thay đổi trong thuộc tính của văn bản
        // (chẳng hạn như một loại thuộc tính được thay đổi, nhưng không phải nội dung văn bản)
        }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableStudent = new javax.swing.JTable();
        jTitle = new javax.swing.JLabel();
        jSearch = new javax.swing.JTextField();
        jButtonClearSearch = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "STT", "PersonID", "FirstName", "LastName"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableStudentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableStudent);

        jTitle.setText("Title");

        jSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchActionPerformed(evt);
            }
        });
        jSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jSearchKeyReleased(evt);
            }
        });

        jButtonClearSearch.setText("X");
        jButtonClearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearSearchActionPerformed(evt);
            }
        });

        jButtonSave.setText("Add");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonClearSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonClearSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTableStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableStudentMouseClicked
        // TODO add your handling code here:
        int n = jTableStudent.getSelectedRow();
        studentID = Integer.parseInt(jTableStudent.getValueAt(n,1).toString());
    }//GEN-LAST:event_jTableStudentMouseClicked

    private void jSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jSearchActionPerformed

    private void jSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSearchKeyReleased
        // TODO add your handling code here:
//        if(jSearch.getText().isEmpty()){
//            jButtonClearSearch.setVisible(false);
//            jTableStudent.setRowSorter(null);
//            LoadData();
//        }else{
//            Search(jSearch.getText().toString());
//            jButtonClearSearch.setVisible(true);
//        }
    }//GEN-LAST:event_jSearchKeyReleased

    public void SearchTable(String text){
        DefaultTableModel faut = (DefaultTableModel) jTableStudent.getModel();
        TableRowSorter<DefaultTableModel> search = new TableRowSorter<>(faut);
        jTableStudent.setRowSorter(search);
        search.setRowFilter(RowFilter.regexFilter("(?i)"+text));
    }
    public void SearchAll(){
         if(jSearch.getText().isEmpty()){
            jButtonClearSearch.setVisible(false);
            jTableStudent.setRowSorter(null);
            LoadData();
        }else{
            SearchTable(jSearch.getText().toString());
            jButtonClearSearch.setVisible(true);
        }
    }
    
    private void jButtonClearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearSearchActionPerformed
        // TODO add your handling code here:
        jSearch.setText("");
        LoadData();
    }//GEN-LAST:event_jButtonClearSearchActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        // TODO add your handling code here:
        if(studentGradeBll.getEnrollment(courseID, studentID) == 0) {
            JOptionPane.showMessageDialog(null, "Add success");
            this.dispose();
            
            StudentGradeDTO studentGrade = new StudentGradeDTO();
            studentGrade.setCourseID(courseID);
            studentGrade.setStudentID(studentID);
            studentGrade.setGrade(0);
            studentGradeBll.insertStudent(studentGrade);
        }
        else {
            JOptionPane.showMessageDialog(null, "This student is already in the classroom");
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    public void LoadData(){
        String columns[]=new String[]{"STT","PersonID","FirstName","LastName"};
        DefaultTableModel model=new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        for(String i:columns){
            model.addColumn(i);
        }
        int stt=0;
        for(PersonDTO i : personBLL.getListStudent()){
           Vector t=new Vector();
           t.add(stt+=1);
           t.add(i.getPersonID());
           t.add(i.getFirstName());
           t.add(i.getLastName());
           model.addRow(t);
        }
        jTableStudent.setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClearSearch;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jSearch;
    private javax.swing.JTable jTableStudent;
    private javax.swing.JLabel jTitle;
    // End of variables declaration//GEN-END:variables
}
