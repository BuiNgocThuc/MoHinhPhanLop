/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.MainPanel;

import BLL.CourseInstructorBLL;
import DTO.CourseDTO;
import DTO.PersonDTO;
import java.sql.SQLException;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class PnTableInstructor extends javax.swing.JPanel {

    /**
     * Creates new form pnTableInstructor
     */
    private final CourseInstructorBLL courseInstructorBLL = new CourseInstructorBLL();

    public PnTableInstructor() throws SQLException {
        initComponents();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spInstructor = new javax.swing.JScrollPane();
        tblInstructor = new javax.swing.JTable();

        tblInstructor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "ID", "Họ", "Tên", "Môn dạy"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spInstructor.setViewportView(tblInstructor);
        if (tblInstructor.getColumnModel().getColumnCount() > 0) {
            tblInstructor.getColumnModel().getColumn(0).setMinWidth(50);
            tblInstructor.getColumnModel().getColumn(0).setMaxWidth(50);
            tblInstructor.getColumnModel().getColumn(1).setMinWidth(50);
            tblInstructor.getColumnModel().getColumn(1).setMaxWidth(50);
            tblInstructor.getColumnModel().getColumn(2).setMinWidth(150);
            tblInstructor.getColumnModel().getColumn(2).setMaxWidth(150);
            tblInstructor.getColumnModel().getColumn(3).setMinWidth(150);
            tblInstructor.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 687, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(spInstructor, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(spInstructor, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane spInstructor;
    private javax.swing.JTable tblInstructor;
    // End of variables declaration//GEN-END:variables
    private void loadData() throws SQLException {
        List<PersonDTO> instructors = courseInstructorBLL.getListInstructorAssignCourse();
        DefaultTableModel model = (DefaultTableModel) tblInstructor.getModel();
        model.setRowCount(0);
        int no = 1;
        for (PersonDTO instructor : instructors) {
            int instructorID = instructor.getPersonID();
            String firstName = instructor.getFirstName();
            String lastName = instructor.getLastName();

            String courseInfos = "";
            List<CourseDTO> courses = instructor.getCourses();
            if (courses == null) {
                continue;
            }
            for (int i = 0; i < courses.size() - 1; i++) {
                courseInfos += String.format("%d-%s, ",
                        courses.get(i).getCourseID(),
                        courses.get(i).getTitle());
            }
            courseInfos += String.format("%d-%s",
                    courses.get(courses.size() - 1).getCourseID(),
                    courses.get(courses.size() - 1).getTitle());
            Object[] row
                    = {
                        no++, instructorID, lastName, firstName, courseInfos
                    };
            model.addRow(row);
        }
    }
}
